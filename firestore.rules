rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(ownerId) {
      return isAuthenticated() && request.auth.uid == ownerId;
    }
    
    function validateLobbyData() {
      return request.resource.data.keys().hasAll(['code', 'ownerId', 'ownerName']) &&
             request.resource.data.code is string &&
             request.resource.data.code.size() >= 4 &&
             request.resource.data.code.size() <= 10;
    }
    
    function validatePlayerData() {
      return request.resource.data.keys().hasAll(['name']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 50;
    }
    
    function validateRootPlayerData() {
      return request.resource.data.keys().hasAll(['name', 'email', 'uid']) &&
             request.resource.data.name is string &&
             request.resource.data.name.size() > 0 &&
             request.resource.data.name.size() <= 100 &&
             request.resource.data.email is string &&
             request.resource.data.uid is string &&
             request.resource.data.uid == request.auth.uid;
    }

    // Rules for the root 'players' collection (user profiles)
    match /players/{playerId} {
      // Users can read their own player profile
      allow read: if isAuthenticated() && 
                     request.auth.uid == playerId;
      
      // Users can create their own player profile
      allow create: if isAuthenticated() && 
                       request.auth.uid == playerId &&
                       validateRootPlayerData();
      
      // Users can update their own player profile
      allow update: if isAuthenticated() && 
                       request.auth.uid == playerId &&
                       validateRootPlayerData();
                       
      // Users can delete their own player profile
      allow delete: if isAuthenticated() && 
                       request.auth.uid == playerId;
    }

    // Rules for the 'lobbies' collection
    match /lobbies/{lobbyId} {
      // Allow any authenticated user to read lobby documents
      allow read: if isAuthenticated();
      
      // Allow creating lobbies with proper validation
      allow create: if isAuthenticated() && 
                       validateLobbyData() &&
                       request.auth.uid == request.resource.data.ownerId;
      
      // Only lobby owner can update lobby
      allow update: if isAuthenticated() && 
                       isOwner(resource.data.ownerId);
                       
      // Only lobby owner can delete lobby
      allow delete: if isAuthenticated() && 
                       isOwner(resource.data.ownerId);
    }

    // Rules for the 'players' subcollection within 'lobbies'
    match /lobbies/{lobbyId}/players/{playerId} {
      // Allow any authenticated user to read any player document
      allow read: if isAuthenticated();
      
      // Allow creating player with validation
      allow create: if isAuthenticated() && 
                       validatePlayerData();
      
      // Allow updating player with validation  
      allow update: if isAuthenticated() && 
                       validatePlayerData();
                       
      // Allow deleting player
      allow delete: if isAuthenticated();
    }

    // Rate limiting collection (optional - for Firestore-based rate limiting)
    match /rateLimits/{userId} {
      allow read, write: if isAuthenticated() && 
                            request.auth.uid == userId;
    }
  }
}
